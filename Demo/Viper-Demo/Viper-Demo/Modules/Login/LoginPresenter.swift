//
//  LoginPresenter.swift
//  Viper-v4-Demo
//
//  Created by Zvonimir Medak on 05.10.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift
import RxCocoa

final class LoginPresenter {

    // MARK: - Private properties -

    private unowned let view: LoginViewInterface
    private let interactor: LoginInteractorInterface
    private let wireframe: LoginWireframeInterface

    private let emailValidator: EmailValidator
    private let passwordValidator: PasswordValidator
    private let disposeBag: DisposeBag

    // MARK: - Lifecycle -

    init(
        view: LoginViewInterface,
        interactor: LoginInteractorInterface,
        wireframe: LoginWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe

        emailValidator = EmailValidator()
        passwordValidator = PasswordValidator(minLength: 6)
        disposeBag = DisposeBag()
    }
}

// MARK: - Extensions -

extension LoginPresenter: LoginPresenterInterface {

    func configure(with output: Login.ViewOutput) -> Login.ViewInput {
        handle(
            login: output.actions.login,
            output.actions.email,
            output.actions.password,
            remember: output.actions.rememberMe
        )
        handle(
            register: output.actions.register,
            output.actions.email,
            output.actions.password,
            remember: output.actions.rememberMe
        )

        return Login.ViewInput(events: LoginEvents(
            areActionsAvailable: handle(inputs: (email: output.actions.email, password: output.actions.password))
        ))
    }

}

private extension LoginPresenter {
    func handle(
        login: Signal<Void>,
        _ email: Driver<String?>,
        _ password: Driver<String?>,
        remember: Driver<Bool>
    ) {
        let inputs = Driver.combineLatest(email.compactMap { $0 }, password.compactMap { $0 })
        login
            .withLatestFrom(inputs)
            .flatMap { [unowned self] email, password -> Driver<User> in
                return performLogin(email, password)
            }
            .withLatestFrom(remember) { ($0, $1) }
            .do(onNext: { [unowned self] user, remember in
                saveUser(remember, user)
                view.hideProgressHUD()
            })
            .drive(onNext: { [unowned wireframe] _ in
                wireframe.navigateToHome()
            })
            .disposed(by: disposeBag)
    }

    func performLogin(_ email: String, _ password: String) -> Driver<User> {
        return interactor
            .login(with: email, password)
            .do(onError: { [unowned self] error in
                view.hideProgressHUD()
                showValidationError(error)
            }, onSubscribe: { [unowned view] in
                view.showProgressHUD()
            })
            .asDriver(onErrorDriveWith: .never())
    }

    func handle(
        register: Signal<Void>,
        _ email: Driver<String?>,
        _ password: Driver<String?>,
        remember: Driver<Bool>
    ) {
        let inputs = Driver.combineLatest(email.compactMap { $0 }, password.compactMap { $0 })
        register
            .withLatestFrom(inputs)
            .flatMap { [unowned self] email, password -> Driver<User> in
                return performRegister(email, password)
            }
            .withLatestFrom(remember) { ($0, $1) }
            .do(onNext: { [unowned self] user, remember in
                saveUser(remember, user)
                view.hideProgressHUD()
            })
            .drive(onNext: { [unowned wireframe] _ in
                wireframe.navigateToHome()
            })
            .disposed(by: disposeBag)
    }

    func performRegister(_ email: String, _ password: String) -> Driver<User> {
        return interactor
            .register(with: email, password)
            .do(onError: { [unowned self] error in
                view.hideProgressHUD()
                showValidationError(error)
            }, onSubscribe: { [unowned view] in
                view.showProgressHUD()
            })
            .asDriver(onErrorDriveWith: .never())
    }

    func handle(inputs: (email: Driver<String?>, password: Driver<String?>)) -> Driver<Bool> {
        Driver.combineLatest(inputs.email.compactMap { $0 }, inputs.password.compactMap { $0 })
            .map { [unowned self] email, password in
                return isEmailValid(email) && isPasswordValid(password)
            }
            .startWith(false)
    }

    func isEmailValid(_ email: String) -> Bool {
        return emailValidator.isValid(email)
    }

    func isPasswordValid(_ password: String) -> Bool {
        return passwordValidator.isValid(password)
    }


    func saveUser(_ shouldSave: Bool, _ user: User) {
        if shouldSave {
            interactor.rememberUser()
        }
    }
}

private extension LoginPresenter {
    func showValidationError(_ error: Error) {
        wireframe.showAlert(with: "Error", message: error.localizedDescription)
    }
}
