//
//  DetailsFormatter.swift
//  Viper-Demo
//
//  Created by Zvonimir Medak on 07.10.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class DetailsFormatter {
}

// MARK: - Extensions -

extension DetailsFormatter: DetailsFormatterInterface {

    func format(for input: Details.FormatterInput) -> Details.FormatterOutput {

        return Details.FormatterOutput(sections: handle(input.models))
    }

}

private extension DetailsFormatter {
    func handle(_ items: Driver<(Show, [Review])>) -> Driver<[TableSectionItem]> {
        return items
            .map { [unowned self] in
                createShowDetailsSectionItems(items: $0)
            }
    }

    func createShowDetailsSectionItems(items: (show: Show, reviews: [Review])) -> [ShowDetailsSection] {
        var showDetailsItems: [DetailsItem] = []
        showDetailsItems.append(contentsOf: createMandatoryItems(items.show))
        showDetailsItems.append(contentsOf: createReviewSection(with: items.show, items.reviews))
        return [ShowDetailsSection(items: showDetailsItems)]
    }

    func createMandatoryItems(_ show: Show) -> [DetailsItem] {
        var showDetailsItems: [DetailsItem] = []
        showDetailsItems.append(
            DetailsItem(
                model: ShowWithReviews(
                    show: show,
                    review: nil
                ),
                type: .image
            )
        )
        showDetailsItems.append(
            DetailsItem(
                model: ShowWithReviews(
                    show: show,
                    review: nil
                ),
                type: .description
            )
        )
        showDetailsItems.append(
            DetailsItem(
                model: ShowWithReviews(
                    show: nil,
                    review: nil
                ),
                type: .reviewsTitle
            )
        )
        return showDetailsItems
    }

    func createReviewSection(with show: Show, _ reviews: [Review]) -> [DetailsItem] {
        var showDetailsItems: [DetailsItem] = []
        guard reviews.isEmpty else {
            showDetailsItems.append(
                DetailsItem(
                    model: ShowWithReviews(
                        show: show,
                        review: nil
                    ),
                    type: .averageRating
                )
            )
            reviews.forEach { review in
                showDetailsItems.append(
                    DetailsItem(
                        model: ShowWithReviews(
                            show: nil,
                            review: review
                        ),
                        type: .review
                    )
                )
            }
            showDetailsItems.append(
                DetailsItem(
                    model: ShowWithReviews(
                        show: show,
                        review: nil
                    ),
                    type: .addReview
                )
            )
            return showDetailsItems
        }
        showDetailsItems.append(
            DetailsItem(
                model: ShowWithReviews(
                    show: show,
                    review: nil
                ),
                type: .noReviews
            )
        )
        return showDetailsItems
    }
}
