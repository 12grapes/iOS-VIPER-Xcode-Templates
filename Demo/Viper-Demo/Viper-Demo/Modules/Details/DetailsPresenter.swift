//
//  DetailsPresenter.swift
//  Viper-Demo
//
//  Created by Zvonimir Medak on 07.10.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift
import RxCocoa

final class DetailsPresenter {

    // MARK: - Private properties -

    private unowned let view: DetailsViewInterface
    private let formatter: DetailsFormatterInterface
    private let interactor: DetailsInteractorInterface
    private let wireframe: DetailsWireframeInterface

    private let showId: String
    private let disposeBag: DisposeBag
    // MARK: - Lifecycle -

    init(
        view: DetailsViewInterface,
        formatter: DetailsFormatterInterface,
        interactor: DetailsInteractorInterface,
        wireframe: DetailsWireframeInterface,
        showId: String
    ) {
        self.view = view
        self.formatter = formatter
        self.interactor = interactor
        self.wireframe = wireframe

        self.disposeBag = DisposeBag()
        self.showId = showId
    }
}

// MARK: - Extensions -

extension DetailsPresenter: DetailsPresenterInterface {

    func configure(with output: Details.ViewOutput) -> Details.ViewInput {
        let titleRelay = PublishRelay<String>()
        let formatterInput = Details.FormatterInput(models: handleInitialLoad(titleRelay: titleRelay))

        let formatterOutput = formatter.format(for: formatterInput)

        return Details.ViewInput(
            models: formatterOutput,
            events: DetailsEvents(title: titleRelay.asSignal())
        )
    }

}

private extension DetailsPresenter {

    func handleInitialLoad(titleRelay: PublishRelay<String>) -> Driver<(Show, [Review])> {
        return Single.zip(
            interactor.getShowDetails(for: showId),
            interactor.getAllReviews(for: showId)
        )
            .do(onSuccess: { [unowned view] show, reviews in
                titleRelay.accept(show.title)
                view.hideProgressHUD()
            }, onError: { [unowned self] error in
                view.hideProgressHUD()
                showDetailsError(error)
            }, onSubscribe: { [unowned view] in
                view.showProgressHUD()
            })
            .asDriver(onErrorDriveWith: .empty())
    }

    func showDetailsError(_ error: Error) {
        wireframe.showAlert(with: "Error", message: error.localizedDescription)
    }
}
